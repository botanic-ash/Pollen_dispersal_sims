k <- k+1
}
}
# Each possible parental pairing has the possible children assigned
children_of_pairing[[pairing]] <- possible_children
# Making vector to hold all probabilities of observing the child genotype given the two parental genotypes
obs_geno_prob <- rep(0, 4)
for(real_geno in 1:nrow(possible_children)){
obs_geno_prob[real_geno] <- calc_true_geno_prob(ind_geno = child_geno, true_geno = possible_children[real_geno,], allele_freqs = allele_freqs, error_1 = error_1, error_2 = error_2)
}
pr_child_given_real_geno <- sum(obs_geno_prob[real_geno] * (1/4)) # Prob observing the real geno given all possible true genos from the designated parental pairing
# Prob observing this child given obs mom given true mom in spot 1 of the pairing and obs dad given true dad in spot 2 of the pairing
ll_child_given_mom_dad <- sum(log(prob_mom[colnames(prob_mom) == all_pairings[1,pairing]]), log(prob_dad[colnames(prob_dad) == all_pairings[2,pairing]]), log(pr_child_given_real_geno))
# Prob observing this child given obs mom given true mom in spot 2 of the pairing and obs dad given true dad in spot 1 of the pairing
ll_child_given_dad_mom <- sum(log(prob_mom[colnames(prob_mom) == all_pairings[2,pairing]]), log(prob_dad[colnames(prob_dad) == all_pairings[1,pairing]]), log(pr_child_given_real_geno))
ll_child_given_any_mom_dad[pairing] <- ll_child_given_mom_dad
ll_child_given_any_mom_dad[pairing] <- ll_child_given_dad_mom
}
total_ll_child_given_mom_dad <- log(sum(exp(ll_child_given_any_mom_dad)))
total_ll_child_given_dad_mom <- log(sum(exp(ll_child_given_any_mom_dad)))
total_ll_child_given_parents <- log(sum(exp(total_ll_child_given_dad_mom), exp(total_ll_child_given_mom_dad)))
return(total_ll_child_given_parents)
}
#unclear how to incorporate allele frequencies that differ at each loci
get_ll <- function(children_data, parental_data, error_1, error_2) {
dad_data <- subset(parental_data, parental_data$Ind %notin% children_data$mom_ID) # Assumes a parent can only ever be a mother or a father
# Make matrix to hold the output of the for loop below
ll_O_given_one_DM <- matrix(nrow = nrow(dad_data), ncol = nrow(children_data),
dimnames = list( c(dad_data$Ind), c(paste0(children_data$mom_ID, "-", children_data$child_ID))))
for(child in 1:nrow(children_data)){
child_ID <- children_data$child_ID[child] # Pulling the child ID corresponds to the child
mom_ID <- children_data$mom_ID[child] # Pulling the mother corresponds to the child
for(dad in 1:nrow(dad_data)){
dad_ID <- dad_data$Ind[dad] # Pulling a single father and dropping the ID and pop columns so just locus data remains
ll_O_given_DM_at_each_locus <- rep(0, num_loci) # Making a vector to hold the prob of this dad for specific mother off pair at each locus
for(locus in 1:num_loci){
ll_O_given_DM_at_each_locus[locus] <- calc_pr_child(locus = locus, mom_ID = mom_ID, dad_ID = dad_ID, child_ID = child_ID, error_1 = error_1, error_2 = error_2) # Saving the prob of that child given the known mother and each potential father at each locus
}
ll_O_given_one_DM[dad, child] <- sum(ll_O_given_DM_at_each_locus) # Since already in log likelihood space can sum across all loci (assuming independence) to get the ll of each dad for each mother/off pair
}
}
total_ll <- sum(log(colSums(exp(ll_O_given_one_DM))) - log(nrow(ll_O_given_one_DM))) # Overall likelihood of the data (mother and offspring pairs) and the parameters, first sum over columns to sum across all fathers then divide by the probability of each father being the correct father which is the same as number of fathers and therefore the number of rows in the ll_O_given_one_DM df (assumes each father has equal prob to contribute to each mother-off pair)
return(list(total_ll, ll_O_given_one_DM))
}
error_2_est = .1
error_1_est = .05
#rates of errors
error_2 = error_2_est
error_1 = error_1_est
# Testing my big compiled function
get_ll(children_data = children_data, parental_data = parental_data, error_1 = error_1, error_2 = error_2)[[1]]
children_data
parental_data
children_data[,grepl( "locus" , colnames(children_data))]
.05
.05/1.05
1 - (2*0.04761905)
0.9047619 + 0.04761905 + 0.04761905
locus_data
locus_data <- parental_data[,grepl( "locus" , colnames(parental_data))]
locus_data
allele_freqs <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
get_alleles_and_freqs
# Function for obtaining allele frequencies at each locus
# Input: Desired locus number for which you will obtain allele frequency data
# Output: A list-   Element 1) vector of allele frequencies at that locus
#                   Element 2) matrix with 2 rows, row 1= allele, row 2 = frequency of alleles
get_alleles_and_freqs <- function(locus, parental_data){
# Pulling all alleles at a single locus from all parents in the population
all_alleles <- sort(unique(c(parental_data[, c(2*locus)], parental_data[, 2*locus + 1])))
# Getting the frequency of each allele, I think this should be input somewhere???? currently just going to make everything 1/k
allele_freqs <- matrix(c(all_alleles, rep(1/length(all_alleles), length(all_alleles))), ncol = length(all_alleles), nrow = 2, byrow = T)
return(list(all_alleles,allele_freqs))
}
allele_freqs <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
allele_freqs
locus
allele_freqs
alleles <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
alleles
k = length(alleles) # k = number of alleles at designated locus
k
e_1 = error_1 / (1 + type1_rate)
e_1
e_2
genos <- locus_data[, c(2*locus - 1, 2*locus)] # Keep only the genotypes at the designated locus
genos
ind = 1
genos[ind,1] != genos[ind,2
]
possible_genos = list(c(genos[ind,1], genos[ind,2]), c(genos[ind,1], genos[ind,1]), c(genos[ind,2], genos[ind,2]))
possible_genos
unlist(possible_genos)
?sample
paste0(genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2]
)
c(cat(paste0(genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2])))
c(eval(paste0(genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2])))
eval(paste0("c(",genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2],")"))
possible_genos = eval(paste0("c(",genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2],")"))
possible_genos
parse(paste0("c(",genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2],")"))
?bquote
a <- 2
bquote(a == a)
quote(a == a)
bquote(a == .(a))
?substitute
parse(text = paste0("c(",genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2],")"))
eval(parse(text = paste0("c(",genos[ind,1],"-", genos[ind,2], ",", genos[ind,1],"-", genos[ind,1],",", genos[ind,2], "-", genos[ind,2],")")))
eval(parse(text = paste0("c(",genos[ind,1],"_", genos[ind,2], ",", genos[ind,1],"_", genos[ind,1],",", genos[ind,2], "_", genos[ind,2],")")))
het <- paste0(genos[ind,1],"_", genos[ind,2])
het
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
possible_genos
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
new_geno
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
if new_geno
new_geno
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
new_geno
e
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
new_geno
?strsplit
old_geno
genos[ind,1]
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
current_geno
1 - 2*e_1
possible_genos
unlist(strsplit(current_geno, "-"))
alleles
c(alleles %notin% allele1
)
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele1
c(alleles %notin% allele1)
alleles[alleles %notin% allele1]
new_allele1 <- sample(alleles[alleles %notin% allele1], prob = rep(e_2, k - 1))
new_allele1
new_allele1 <- sample(alleles[alleles %notin% allele1], size = 1, prob = rep(e_2, k - 1))
new_allele1
new_allele1 <- sample(alleles[alleles %notin% allele1], size = 1, prob = rep(e_2, k - 1))
new_allele1
alleles[alleles %notin% allele1], size = 1, prob = rep(e_2, k - 1)
rep(e_2, k - 1)
rep(e_2/(e_2*k), k - 1)
sum(rep(e_2/(e_2*k), k - 1))
prob = c(1 - 2*e_1, e_1, e_1)
c(1 - 2*e_1, e_1, e_1)
1-e2
e2
1-e_2
e_2/k-1
e_2/(k-1)
c(1-e_2, rep(e_2/(k-1), k - 1)
)
sum( c(1-e_2, rep(e_2/(k-1), k - 1))
)
error_2 / (k + type2_rate)
error_2 / (k + error_2)
k
type2_rate
type2_rate
type2_rate
error_2
new_geno
new_geno
current_geno
c(1-e_2, rep(e_2/(k-1)
)
)
c(1-e_2, rep(e_2/(k-1), k - 1)
)
locus_data
locus_data[ind, locus]
simulating_error <- function(data_for_editing, type1_rate, type2_rate, parental_data = NA){
if(missing(parental_data)){
parental_data <- data_for_editing
}
# Pulling just the loci from the df
locus_data <- data_for_editing[,grepl( "locus" , colnames(data_for_editing))]
# Making the new matrix with the same shape as the old matrix
locus_data_new <- matrix(ncol = ncol(locus_data), nrow = nrow(locus_data))
for(locus in 1:num_loci){
alleles <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
k = length(alleles) # k = number of alleles at designated locus
e_1 = error_1 / (1 + type1_rate)
e_2 = error_2 / (k + type2_rate)
genos <- locus_data[, c(2*locus - 1, 2*locus)] # Keep only the genotypes at the designated locus
for(ind in 1:ncol(genos)){
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, locus] <- new_allele1
locus_data_new[ind, locus] <- new_allele2
}
}
return(locus_data_new)
}
parental_data_error <- simulating_error(data_for_editing = parental_data, type1_rate = .1, type2_rate = .05, parental_data = parental_data)
parental_data_error
ind
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
old_geno
current_geno <- old_geno
current_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
current_geno
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
allele1
allele2
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele1
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2
locus_data_new
data_for_editing = parental_data
# Pulling just the loci from the df
locus_data <- data_for_editing[,grepl( "locus" , colnames(data_for_editing))]
locus_data
# Making the new matrix with the same shape as the old matrix
locus_data_new <- matrix(ncol = ncol(locus_data), nrow = nrow(locus_data))
locus_data_new
locus
genos
for(ind in 1:ncol(genos)){
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, locus] <- new_allele1
locus_data_new[ind, locus + 1] <- new_allele2
}
locus_data_new
genos
for(ind in 1:nrow(genos)){
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, locus] <- new_allele1
locus_data_new[ind, locus + 1] <- new_allele2
}
locus_data_new
locus_data
simulating_error <- function(data_for_editing, type1_rate, type2_rate, parental_data = NA){
if(missing(parental_data)){
parental_data <- data_for_editing
}
# Pulling just the loci from the df
locus_data <- data_for_editing[,grepl( "locus" , colnames(data_for_editing))]
# Making the new matrix with the same shape as the old matrix
locus_data_new <- matrix(ncol = ncol(locus_data), nrow = nrow(locus_data))
for(locus in 1:num_loci){
alleles <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
k = length(alleles) # k = number of alleles at designated locus
e_1 = error_1 / (1 + type1_rate)
e_2 = error_2 / (k + type2_rate)
genos <- locus_data[, c(2*locus - 1, 2*locus)] # Keep only the genotypes at the designated locus
for(ind in 1:nrow(genos)){
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, locus] <- new_allele1
locus_data_new[ind, locus + 1] <- new_allele2
}
}
return(locus_data_new)
}
parental_data_error <- simulating_error(data_for_editing = parental_data, type1_rate = .1, type2_rate = .05, parental_data = parental_data)
parental_data_error
simulating_error <- function(data_for_editing, type1_rate, type2_rate, parental_data = NA){
if(missing(parental_data)){
parental_data <- data_for_editing
}
# Pulling just the loci from the df
locus_data <- data_for_editing[,grepl( "locus" , colnames(data_for_editing))]
# Making the new matrix with the same shape as the old matrix
locus_data_new <- matrix(ncol = ncol(locus_data), nrow = nrow(locus_data))
for(locus in 1:num_loci){
alleles <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
k = length(alleles) # k = number of alleles at designated locus
e_1 = error_1 / (1 + type1_rate)
e_2 = error_2 / (k + type2_rate)
genos <- locus_data[, c(2*locus - 1, 2*locus)] # Keep only the genotypes at the designated locus
for(ind in 1:nrow(genos)){
#ask if het, if yes, then perform dropout then other error
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, 2*locus - 1] <- new_allele1
locus_data_new[ind, 2*locus] <- new_allele2
}
}
return(locus_data_new)
}
parental_data_error <- simulating_error(data_for_editing = parental_data, type1_rate = .1, type2_rate = .05, parental_data = parental_data)
parental_data_error
ncol(locus_data)/2
diffs_in_genos <- data.frame(matrix(ncol = ncol(locus_data)/2, nrow = nrow(locus_data)))
simulating_error <- function(data_for_editing, type1_rate, type2_rate, parental_data = NA){
if(missing(parental_data)){
parental_data <- data_for_editing
}
# Pulling just the loci from the df
locus_data <- data_for_editing[,grepl( "locus" , colnames(data_for_editing))]
# Making the new matrix with the same shape as the old matrix
locus_data_new <- data.frame(matrix(ncol = ncol(locus_data), nrow = nrow(locus_data)))
diffs_in_genos <- data.frame(matrix(ncol = ncol(locus_data)/2, nrow = nrow(locus_data)))
for(locus in 1:num_loci){
alleles <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
k = length(alleles) # k = number of alleles at designated locus
e_1 = error_1 / (1 + type1_rate)
e_2 = error_2 / (k + type2_rate)
genos <- locus_data[, c(2*locus - 1, 2*locus)] # Keep only the genotypes at the designated locus
for(ind in 1:nrow(genos)){
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
#Ask if genotype is het, if yes, then add chance of allelic dropout error
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, 2*locus - 1] <- new_allele1
locus_data_new[ind, 2*locus] <- new_allele2
# Checking if the new genos are *functionally* diff from the old genos
new_geno_v1 <- paste0(new_allele1, "-", new_allele2)
new_geno_v2 <- paste0(new_allele1, "-", new_allele2)
# Noting whether or not the genotype has changed and putting answer in the diffs_in_genos matrix
geno_changed <- "N"
if (old_geno %notin% c(new_geno_v1, new_geno_v2)) {
geno_changed <- "Y"
}
diffs_in_genos[ind, locus] <- geno_changed
}
}
return(list(locus_data_new, diffs_in_genos))
}
parental_data_error <- simulating_error(data_for_editing = parental_data, type1_rate = .1, type2_rate = .05, parental_data = parental_data)
parental_data_error[[1]]
parental_data_error[[2]]
parental_data_error[[2]][1,2]
install.packages("workflowr")
library(workflowr)
parental_data_error[[2]]
colSums(parental_data_error[[2]])
simulating_error <- function(data_for_editing, type1_rate, type2_rate, parental_data = NA){
if(missing(parental_data)){
parental_data <- data_for_editing
}
# Pulling just the loci from the df
locus_data <- data_for_editing[,grepl( "locus" , colnames(data_for_editing))]
# Making the new matrix with the same shape as the old matrix
locus_data_new <- data.frame(matrix(ncol = ncol(locus_data), nrow = nrow(locus_data)))
diffs_in_genos <- data.frame(matrix(ncol = ncol(locus_data)/2, nrow = nrow(locus_data)))
for(locus in 1:num_loci){
alleles <- get_alleles_and_freqs(locus, parental_data = parental_data)[[1]] # Want to get all possible alleles from the parental data
k = length(alleles) # k = number of alleles at designated locus
e_1 = error_1 / (1 + type1_rate)
e_2 = error_2 / (k + type2_rate)
genos <- locus_data[, c(2*locus - 1, 2*locus)] # Keep only the genotypes at the designated locus
for(ind in 1:nrow(genos)){
old_geno <- paste0(genos[ind,1], "-", genos[ind,2])
current_geno <- old_geno
#Ask if genotype is het, if yes, then add chance of allelic dropout error
if(genos[ind,1] != genos[ind,2]){
het <- paste0(genos[ind,1],"-", genos[ind,2])
homo1 <- paste0(genos[ind,1],"-", genos[ind,1])
homo2 <- paste0(genos[ind,2],"-", genos[ind,2])
possible_genos =  c(het, homo1, homo2)
new_geno <- sample(possible_genos, size = 1, prob = c(1 - 2*e_1, e_1, e_1))
current_geno <- new_geno
}
# Getting the unique alleles into separate vectors again
allele1 <- unlist(strsplit(current_geno, "-"))[1]
allele2 <- unlist(strsplit(current_geno, "-"))[2]
# Adding the error that isn't due to alleleic dropout
new_allele1 <- sample(c(allele1, alleles[alleles %notin% allele1]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
new_allele2 <- sample(c(allele2, alleles[alleles %notin% allele2]), size = 1, prob = c(1-e_2, rep(e_2/(k-1), k - 1)))
# Putting the new genos into a data set
locus_data_new[ind, 2*locus - 1] <- new_allele1
locus_data_new[ind, 2*locus] <- new_allele2
# Checking if the new genos are *functionally* diff from the old genos
new_geno_v1 <- paste0(new_allele1, "-", new_allele2)
new_geno_v2 <- paste0(new_allele1, "-", new_allele2)
# Noting whether or not the genotype has changed and putting answer in the diffs_in_genos matrix
geno_changed <- "F"
if (old_geno %notin% c(new_geno_v1, new_geno_v2)) {
geno_changed <- "T"
}
diffs_in_genos[ind, locus] <- geno_changed
}
}
return(list(locus_data_new, diffs_in_genos))
}
parental_data_error <- simulating_error(data_for_editing = parental_data, type1_rate = .1, type2_rate = .05, parental_data = parental_data)
parental_data_error[[1]] #unclear but might be nicer to make everything a dataframe bc these seem tidier
colSums(parental_data_error[[2]])
parental_data_error[[2]]
as.boolean(parental_data_error[[2]]
)
